#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
spring:
  banner:
    charset: UTF-8
  jackson:
    time-zone: UTC
    date-format: "yyyy-MM-dd HH:mm:ss"
  cache:
    # default enable cache, you can disable by `type: none`
    type: none
    cache-names:
      - tenant
      - user
      - processDefinition
      - processTaskRelation
      - taskDefinition
    caffeine:
      spec: maximumSize=100,expireAfterWrite=300s,recordStats
  datasource:
    driver-class-name: {{dolphin_database_config['dolphin_database_driver']}}
    url: {{ dolphin_database_config['dolphin_database_url'] }}
    username: {{ dolphin_database_config['dolphin_database_username'] }}
    password: {{ dolphin_database_config['dolphin_database_password'] }}
    hikari:
      connection-test-query: select 1
      minimum-idle: 5
      auto-commit: true
      validation-timeout: 3000
      pool-name: DolphinScheduler
      maximum-pool-size: 50
      connection-timeout: 30000
      idle-timeout: 600000
      leak-detection-threshold: 0
      initialization-fail-timeout: 1
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: never
    properties:
      org.quartz.threadPool.threadPriority: {{dolphin_quartz_map['org.quartz.threadPool.threadPriority']}}
      org.quartz.jobStore.isClustered: {{dolphin_quartz_map['org.quartz.jobStore.isClustered']}}
      org.quartz.jobStore.class: {{dolphin_quartz_map['org.quartz.jobStore.class']}}
      org.quartz.scheduler.instanceId: {{dolphin_quartz_map['org.quartz.scheduler.instanceId']}}
      org.quartz.jobStore.tablePrefix: {{dolphin_quartz_map['org.quartz.jobStore.tablePrefix']}}
      org.quartz.jobStore.acquireTriggersWithinLock: {{dolphin_quartz_map['org.quartz.jobStore.acquireTriggersWithinLock']}}
      org.quartz.scheduler.instanceName: {{dolphin_quartz_map['org.quartz.scheduler.instanceName']}}
      org.quartz.threadPool.class: {{dolphin_quartz_map['org.quartz.threadPool.class']}}
      org.quartz.jobStore.useProperties: {{dolphin_quartz_map['org.quartz.jobStore.useProperties']}}
      org.quartz.threadPool.makeThreadsDaemons: {{dolphin_quartz_map['org.quartz.threadPool.makeThreadsDaemons']}}
      org.quartz.threadPool.threadCount: {{dolphin_quartz_map['org.quartz.threadPool.threadCount']}}
      org.quartz.jobStore.misfireThreshold: {{dolphin_quartz_map['org.quartz.jobStore.misfireThreshold']}}
      org.quartz.scheduler.batchTriggerAcquisitionMaxCount: {{dolphin_quartz_map['org.quartz.scheduler.batchTriggerAcquisitionMaxCount']}}
      org.quartz.scheduler.makeSchedulerThreadDaemon: {{dolphin_quartz_map['org.quartz.scheduler.makeSchedulerThreadDaemon']}}
      org.quartz.jobStore.driverDelegateClass: {{dolphin_quartz_map['org.quartz.jobStore.driverDelegateClass']}}
      org.quartz.jobStore.clusterCheckinInterval: {{dolphin_quartz_map['org.quartz.jobStore.clusterCheckinInterval']}}

registry:
  type: {{dolphin_registry_map['registry.plugin.name']}}
  zookeeper:
    namespace: {{dolphin_registry_map['registry.namespace']}}
    connect-string: {{dolphin_registry_map['registry.servers']}}
    retry-policy:
      base-sleep-time: {{dolphin_registry_map['registry.base.sleep.time.ms']}}
      max-sleep: {{dolphin_registry_map['registry.max.sleep.ms']}}
      max-retries: {{dolphin_registry_map['registry.max.retries']}}
    session-timeout: {{dolphin_registry_map['registry.session.timeout.ms']}}
    connection-timeout: {{dolphin_registry_map['registry.connection.timeout.ms']}}
    block-until-connected: {{dolphin_registry_map['registry.block.until.connected.wait']}}
    digest: ~

master:
  listen-port: {{dolphin_master_map['master.listen.port']}}
  # master fetch command num
  fetch-command-num: 10
  # master prepare execute thread number to limit handle commands in parallel
  pre-exec-threads: 10
  # master execute thread number to limit process instances in parallel
  exec-threads: {{dolphin_master_map['master.exec.threads']}}
  # master dispatch task number per batch, if all the tasks dispatch failed in a batch, will sleep 1s.
  dispatch-task-number: {{dolphin_master_map['master.dispatch.task.num']}}
  # master host selector to select a suitable worker, default value: LowerWeight. Optional values include random, round_robin, lower_weight
  host-selector: {{dolphin_master_map['master.host.selector']}}
  # master heartbeat interval
  heartbeat-interval: {{dolphin_master_map['master.heartbeat.interval']}}
  # master commit task retry times
  task-commit-retry-times: {{dolphin_master_map['master.task.commit.retryTimes']}}
  # master commit task interval
  task-commit-interval: {{dolphin_master_map['master.task.commit.interval']}}
  state-wheel-interval: 5s
  # master max cpuload avg, only higher than the system cpu load average, master server can schedule. default value -1: the number of cpu cores * 2
  max-cpu-load-avg: {{dolphin_master_map['master.max.cpuload.avg']}}
  # master reserved memory, only lower than system available memory, master server can schedule. default value 0.3, the unit is G
  reserved-memory: {{dolphin_master_map['master.reserved.memory']}}
  # failover interval, the unit is minute
  failover-interval: 10m
  # kill yarn jon when failover taskInstance, default true
  kill-yarn-job-when-task-failover: true
  registry-disconnect-strategy:
    # The disconnect strategy: stop, waiting
    strategy: waiting
    # The max waiting time to reconnect to registry if you set the strategy to waiting
    max-waiting-time: 100s
  worker-group-refresh-interval: 10s

server:
  port: 5679

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      enabled: true
      show-details: always
  health:
    db:
      enabled: true
    defaults:
      enabled: false
  metrics:
    tags:
      application: ${spring.application.name}

metrics:
  enabled: true
